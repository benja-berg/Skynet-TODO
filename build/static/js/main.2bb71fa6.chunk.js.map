{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["mySky","json","client","SkynetClient","hostApp","a","loadMySky","dev","checkLogin","requestLoginAccess","console","log","GetItems","ChangePlaceholder","min","max","emojis","JSON","parse","document","getElementById","placeholder","Math","floor","random","Add","input","value","createTODO","undefined","count","Object","keys","length","SetItems","text","container","createElement","id","todo","classList","add","setAttribute","readOnly","ticker","textContent","containerchild1","containerchild2","createTextNode","className","appendChild","getElementsByClassName","Clear","remove","setJSON","1","data","dataLink","getJSON","HandleJSON","i","addEventListener","TickOff","newData","stringifiedJSON","stringify","slice","SendModifiedJSON","MySkyLogin","e","code","window","onload","App","onClick","type","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.2bb71fa6.chunk.js","sourcesContent":["import './App.css';\nimport { SkynetClient } from 'skynet-js';\n\n//instantiating client & hostapp for future reference\nconst client = new SkynetClient(\"https://siasky.net\");\nconst hostApp = \"host-app.hns\";\n\n//here as i cant use function-internal constants\nvar mySky;\nvar json;\n\n//main UI\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <p>\n          TODO LIST\n        </p>\n\t<div className=\"flex-container\">\n\t\t<div className=\"flex-child\">\n\t\t\t<button onClick={Clear} className=\"button\">Clear</button>\n \t\t</div>\n\t\t<div className=\"flex-child\">\n\t\t\t<button onClick={SendModifiedJSON} className=\"button\">Modify</button>\n \t\t</div>\n\t</div>\n\t<div className=\"flex-container\">\n\t\t<div className=\"flex-child\">\n\t\t\t<input type=\"text\" id=\"todo-input-field\" className=\"input-field\" placeholder=\" ...\"></input>\n \t\t</div>\n\t\t<div className=\"flex-child\">\n\t\t\t<button onClick={Add} className=\"button\">Add</button>\n \t\t</div>\n\t</div>\n      </header>\n    </div>\n  );\n}\n\n//trying to login silently, otherwise opens a popup for the login.\nasync function MySkyLogin() {\n  try {\n    mySky = await client.loadMySky(hostApp, {dev: true});\n    const loggedIn = await mySky.checkLogin();\n    if (!loggedIn) {\n      await mySky.requestLoginAccess();\n    }\n  } catch (error) {\n    console.log(error);\n  }\n  GetItems();\n}\n//automatically running the function\nMySkyLogin();\n\n//checking for enter input, then runs Add()\ndocument.addEventListener('keydown', (e) => {\n  if (e.code == \"Enter\") {\n    Add();\n  }\n});\n\nwindow.onload = function() {\n  ChangePlaceholder();\n}\n\n//picks a random food emoji and makes it the placeholder of the input field\nfunction ChangePlaceholder() {\n  var emojis = '{\"0\": \"üçá\", \"1\": \"üçà\", \"2\": \"üçâ\", \"3\": \"üçä\", \"4\": \"üçã\", \"5\": \"üåØ\", \"6\": \"üçø\", \"7\": \"ü•ü\", \"8\": \"üçî\"}';\n  emojis = JSON.parse(emojis);\n\n  function getRndInteger(min, max) {\n    return Math.floor(Math.random() * (max - min) ) + min;\n  }\n  document.getElementById(\"todo-input-field\").placeholder = emojis[getRndInteger(0, 8)] + \" ...\";\n}\n\n//gets input value, gets data if needed, makes data visible instantly for UX, adds to json\nasync function Add() {\n\n  ChangePlaceholder();\n\n  var input = document.getElementById(\"todo-input-field\").value;\n  document.getElementById(\"todo-input-field\").value = \"\";\n\n  createTODO(input);\n\n  if (json == undefined) {\n    await GetItems();\n  }\n\n  var count = Object.keys(json).length;\n\n  await SetItems(count, input);\n}\n\n//javascript popup\nfunction createTODO(text) {\n      const container = document.createElement(\"div\");\n      container.id = \"todos\";\n      const todo = document.createElement(\"input\");\n      todo.classList.add('class');\n      todo.setAttribute(\"class\", \"input-field\");\n      todo.value = text;\n      todo.readOnly = true;\n      const ticker = document.createElement(\"button\");\n      ticker.classList.add('class');\n      ticker.setAttribute(\"class\", \"button\");\n      ticker.id = text;\n      ticker.textContent = \"‚úîÔ∏è\";\n      const containerchild1 = document.createElement(\"div\");\n      const containerchild2 = document.createElement(\"div\");\n      const newContent = document.createTextNode(text);\n      container.className = \"flex-container\";\n      containerchild1.className = \"flex-child\";\n      containerchild2.className = \"flex-child\";\n      containerchild1.appendChild(todo);\n      containerchild2.appendChild(ticker);\n      container.appendChild(containerchild1);\n      container.appendChild(containerchild2);\n      var header = document.getElementsByClassName(\"App-header\")[0];\n      header.appendChild(container);\n}\n\n//instantly clears locally, and also clears the mysky json\nasync function Clear() {\n  json = JSON.parse('{\"1\": \"ticked\"}');\n  while (document.getElementById(\"todos\") != undefined) {\n    var el = document.getElementById('todos');\n    el.remove();\n  } \n  try {\n    const { data, dataLink } = await mySky.setJSON(\"app.hns/path/file.json\", {1: \"ticked\"});\n  } catch (error) {\n    console.log(error);\n  }\n}\n\n//retrieves the data from mysky & localstorage\nasync function GetItems() {\n    try {\n      const { data, dataLink } = await mySky.getJSON(\"app.hns/path/file.json\");\n      if (json == undefined) {\n        json = data;\n      }\n    } catch (error) {\n      console.log(error)\n    }\n    /*try {\n      var localJSON = localStorage.getItem('todos');\n      localJSON = JSON.parse(localJSON);\n      json = localJSON;\n    } catch (e) {}*/\n    HandleJSON();\n}\n\n//makes the todos visible from the json catched earlier\nfunction HandleJSON() {\n  var count = Object.keys(json).length + 1;\n\n  //remove old elements\n  while (document.getElementById(\"todos\") != undefined) {\n    var el = document.getElementById('todos');\n    el.remove();\n  } \n\n  //make new elements\n  for (let i = 0; i < count; i++) {\n    if (json[i] !== \"ticked\") {\n        if (json[i] !== undefined) {\n      const container = document.createElement(\"div\");\n      container.id = \"todos\";\n      const todo = document.createElement(\"input\");\n      todo.classList.add('class');\n      todo.setAttribute(\"class\", \"input-field\");\n      todo.readOnly = true;\n      todo.value = json[i];\n      const ticker = document.createElement(\"button\");\n      ticker.classList.add('class');\n      ticker.setAttribute(\"class\", \"button\");\n      ticker.id=i;\n      ticker.textContent=\"‚úîÔ∏è\";\n      ticker.addEventListener(\"click\", function(){TickOff(i)});\n      const containerchild1 = document.createElement(\"div\");\n      const containerchild2 = document.createElement(\"div\");\n      const newContent = document.createTextNode(json[i]);\n      container.className=\"flex-container\";\n      containerchild1.className=\"flex-child\";\n      containerchild2.className=\"flex-child\";\n      containerchild1.appendChild(todo);\n      containerchild2.appendChild(ticker);\n      container.appendChild(containerchild1);\n      container.appendChild(containerchild2);\n      var header = document.getElementsByClassName(\"App-header\")[0];\n      header.appendChild(container);\n        }\n    }\n  }\n}\n\n//replaces todos with \"ticked\", which is ignored in the function above - parsing would be better\nasync function TickOff(id) {\n  console.log(\"param: \" + id);\n  var count = Object.keys(json).length;\n  //var json = json;\n    json[id] = \"ticked\";\n  try {\n    const { data, dataLink } = await mySky.setJSON(\"app.hns/path/file.json\", json);\n  } catch (error) {\n    console.log(error)\n  }\n  HandleJSON();\n}\n\n//magic\nasync function SetItems(count, newData) {\nvar stringifiedJSON = JSON.stringify(json);\n  stringifiedJSON = stringifiedJSON.slice(0, -1);\n  stringifiedJSON = stringifiedJSON + \",\" + '\"' + (count + 1) + '\"' + \":\" + '\"' + newData + '\"' + '}';\n  console.log(\"stringifiedJSON = \" + stringifiedJSON);\njson = JSON.parse(stringifiedJSON);\n//localStorage.setItem('todos', JSON.stringify(json));\n  try {\n    const { data, dataLink } = await mySky.setJSON(\"app.hns/path/file.json\", json);\n  } catch (error) {\n    console.log(error)\n  }\n}\n\n//can be utilized along with a timer and a few if statements to store the TODOs without getting ratelimited\nasync function SendModifiedJSON() {\n  try {\n    const { data, dataLink } = await mySky.setJSON(\"app.hns/path/file.json\", json);\n  } catch (error) {\n    console.log(error)\n  }\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}